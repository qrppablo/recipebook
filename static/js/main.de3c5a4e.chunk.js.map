{"version":3,"sources":["apis/forkify.js","actions/index.js","components/RecipesList.js","components/Recipe.js","components/SearchForm.js","components/App.js","reducers/listReducer.js","reducers/recipeReducer.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","fetchList","query","dispatch","getState","a","forkify","get","response","type","payload","data","recipes","selectRecipe","id","RecipesList","handleClick","props","this","list","length","splice","slice","map","recipe","onClick","e","recipe_id","className","key","src","image_url","title","publisher","renderList","React","Component","connect","state","Recipe","componentDidUpdate","prevProps","prevState","fetchRecipe","renderIngredients","ingredients","ingredient","i","img","background","backgroundPosition","backgroundRepeat","backgroundSize","style","href","source_url","SearchForm","renderInput","input","meta","placeholder","autoComplete","renderError","onSubmit","formVal","error","touched","handleSubmit","Field","name","component","reduxForm","form","validate","errors","match","App","render","display","INITIAL_STATE","combineReducers","formReducer","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","document","querySelector"],"mappings":"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","file":"static/js/main.de3c5a4e.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://forkify-api.herokuapp.com'\n})","import forkify from '../apis/forkify';\n\nexport const fetchList = (query) => async (dispatch, getState) => {\n    const response = await forkify.get(`/api/search?q=${query}`);\n    dispatch({ type: 'FETCH_LIST', payload: response.data.recipes });\n};\n\nexport const selectRecipe = (id) => {\n    return {\n        type: 'SELECT_RECIPE',\n        payload: id\n    };\n};\n\nexport const fetchRecipe = (id) => async (dispatch, getState) => {\n    const response = await forkify.get(`/api/get?rId=${id}`);\n    dispatch({ type: 'FETCH_RECIPE', payload: response.data.recipe });\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchList, selectRecipe } from '../actions';\n\nclass RecipesList extends React.Component {\n\n    handleClick = (id) => {\n        this.props.selectRecipe(id);\n    }\n\n    renderList() {\n\n        if (this.props.list.length > 0) {\n\n            let recipesArray;\n\n            if (this.props.list.length > 9) {\n                recipesArray = this.props.list.splice(0, 10);\n            } else {\n                recipesArray = this.props.list.slice();\n            }\n            \n            return recipesArray.map(recipe => {\n                return (\n                    <div onClick={e => this.handleClick(recipe.recipe_id)} className=\"item\" key={recipe.recipe_id}>\n                        <div className=\"item__avatar\">\n                            <img src={recipe.image_url} className=\"item__avatar--img\" />\n                        </div>\n                        <div className=\"item__content\">\n                            <div className=\"item__description\">\n                                <h2 className=\"item__description--title\">{recipe.title}</h2>\n                                <p className=\"item__description--publisher\">{recipe.publisher}</p>\n                            </div>\n                        </div>\n                    </div>\n                );\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"ui relaxed divided list\">\n                {this.renderList()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { list: state.query.list };\n}\n\nexport default connect(mapStateToProps, { fetchList, selectRecipe })(RecipesList);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchRecipe } from '../actions';\nimport { FaAngleRight } from 'react-icons/fa';\n\nclass Recipe extends React.Component {\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (this.props.id !== prevProps.id) {\n            this.props.fetchRecipe(this.props.id);\n        } \n    }\n\n    renderIngredients = (ingredients) => {\n        if (ingredients) {\n            return ingredients.map((ingredient, i) => {\n                return (\n                    <li key={i}>\n                        <FaAngleRight className=\"recipe__content--ingredients-icon\"/>{ingredient}\n                    </li>\n                );\n            });\n        }\n    }\n\n    renderList() {\n\n        if (this.props.recipe) {\n\n            const img = {\n                background: `linear-gradient(rgba(255, 68, 0, 0.281), rgba(220, 20, 60, 0.274)), url(${this.props.recipe.image_url})`,\n                backgroundPosition: \"center\",\n                backgroundRepeat: \"no-repeat\",\n                backgroundSize: \"cover\"\n            };           \n            \n            return (\n                <div className=\"recipe\" key={this.props.recipe.recipe_id}>\n                    <div className=\"recipe__img\" style={img}></div>\n                    <div className=\"recipe__content\">\n                            <h2 className=\"recipe__content--title\">{this.props.recipe.title}</h2>\n                            <ul className=\"recipe__content--ingredients\">\n                                {this.renderIngredients(this.props.recipe.ingredients)}\n                            </ul>\n                            <div className=\"recipe__content__instructions\">\n                                <a href={this.props.recipe.source_url} className=\"recipe__content__instructions--btn\">INSTRUCTIONS</a>\n                                <p className=\"recipe__content__instructions--by\">Recipe by <b>{this.props.recipe.publisher}</b></p>\n                            </div>\n                    </div>\n                </div>\n            );\n            \n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"ui relaxed divided list\">\n                {this.renderList()}\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return { id: state.data.id, recipe: state.data.recipe  };\n}\n\nexport default connect(mapStateToProps, { fetchRecipe })(Recipe);","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { FaSearch } from 'react-icons/fa';\n\nclass SearchForm extends React.Component {\n    \n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div>\n                    <div className=\"error__msg\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({ input, meta }) => {\n\n        return (\n            <div>\n                <input {...input} className=\"form--input\" placeholder=\"Find a recipe\" autoComplete=\"off\" />\n                {this.renderError(meta)}\n            </div>\n        );\n    }\n\n    onSubmit = (formVal) => {\n        this.props.onSubmit(formVal);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"form\">\n                <Field \n                    name=\"query\" \n                    component={this.renderInput} \n                />\n                <button className=\"form--btn\">\n                    <FaSearch />\n                </button>\n            </form>\n        );\n    }\n\n}\n\nconst validate = (formVal) => {\n    const errors = {};\n\n    if (!formVal.query) {\n        errors.query = 'Enter a recipe name to search (e.g., pizza)';\n    } else if (!formVal.query.match(/^[a-zA-Z\\s]+$/) ) {\n        errors.query = 'Enter a valid recipe name (e.g., pizza)';\n    }\n\n    return errors;\n};\n\nexport default reduxForm({ form: 'searchForm', validate })(SearchForm);","import React, { Fragment } from 'react';\nimport RecipesList from './RecipesList';\nimport Recipe from './Recipe';\nimport { GiKnifeFork } from 'react-icons/gi';\nimport { FaRegCopyright, FaRegCircle } from 'react-icons/fa';\nimport { connect } from 'react-redux';\nimport { fetchList, selectRecipe } from '../actions';\nimport SearchForm from './SearchForm';\n\nclass App extends React.Component {\n\n    onSubmit = (form) => {\n        this.props.fetchList(form.query);\n    };\n\n   componentDidUpdate = () => {\n        this.props.selectRecipe(this.props.list[0].recipe_id);\n   }\n\n    render = () => {\n        return (\n            <Fragment>\n                <div className=\"wrapper\">\n                    <div className=\"wrapper__search\">\n                        <div className=\"wrapper__search--logo\">\n                            <GiKnifeFork />\n                            <span className=\"wrapper__search--logo-text\">Recipebook</span> \n                        </div>\n                        <div className=\"wrapper__search--searchForm\">\n                            <SearchForm onSubmit={this.onSubmit} />\n                        </div>\n                    </div>\n                    <div className=\"wrapper__content\">\n                        <div className=\"wrapper__content__hero\" style={{display: this.props.list.length > 0 ? \"none\" : \"block\" }}>\n                            <h1>WHAT DO YOU WANNA COOK TODAY?</h1>\n                            <h2>DISCOVER +1000 RECIPES NOW!</h2>\n                            <GiKnifeFork className=\"wrapper__content__hero--logo\" />\n                        </div>\n                        <div className=\"wrapper__content__list\">\n                            <RecipesList />\n                        </div>\n                        <div className=\"wrapper__content__recipe\">\n                            <Recipe />\n                        </div>\n                    </div>\n                    <div className=\"copyright\">\n                        <FaRegCopyright className=\"copyright--icon\" /> Pablo Torres\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { list: state.query.list };\n}\n\nexport default connect(mapStateToProps, { fetchList, selectRecipe })(App);","const INITIAL_STATE = {\n    list: {}\n}\n\nexport default (state = INITIAL_STATE, action) => {\n\n    switch (action.type) {\n        case 'FETCH_LIST':\n            return {...state, list: action.payload};\n        default:\n            return state;\n    }\n    \n};","const INITIAL_STATE = {\n    id: null,\n    recipe: null\n}\n\nexport default (state = INITIAL_STATE, action) => {\n\n    switch (action.type) {\n        case 'SELECT_RECIPE':\n            return {...state, id: action.payload};\n        case 'FETCH_RECIPE':\n            return {...state, recipe: action.payload};\n        default:\n            return state;\n    }\n    \n};\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport listReducer from './listReducer';\nimport recipeReducer from './recipeReducer';\n\nexport default combineReducers({\n    form: formReducer,\n    query: listReducer,\n    data: recipeReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// importamos las funciones createStore y applyMiddleware de redux\nimport { createStore, applyMiddleware } from 'redux';\n// importamos redux-thunk\nimport thunk from 'redux-thunk';\nimport App from './components/App';\nimport reducers from './reducers';\nimport './styles.scss';\n\n// le pasamos applyMiddleware(thunk) como segundo argumento a createStore.\n// Cuando aplicamos middleware en redux-thunk, cada vez que se dispatchea\n// una accion, esa misma accion primero se envia a redux-thunk como un\n// middleware y despues redux-thunk envia la accion a todos los reducers.\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}